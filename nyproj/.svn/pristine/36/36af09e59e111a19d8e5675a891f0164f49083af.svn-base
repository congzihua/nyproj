/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.founder.enp.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.founder.enp.entity.Authorization;
import com.founder.enp.entity.DocFlowsKeyWord;
import com.founder.enp.entity.UserPage;
import com.founder.enp.service.DocService;
import com.founder.enp.util.Global;

/** 
 * MyEclipse Struts
 * Creation date: 07-28-2009
 * 
 * XDoclet definition:
 * @struts.action
 */
public class DocFlowsAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		

		Integer powergroup = Integer.parseInt(request.getParameter("pg"));
	    DocService serivce = new DocService();
	   
	    int currentPage = Integer.parseInt(request.getParameter("currentPage") == null?"1":request.getParameter("currentPage"));
	    Integer count = 0;
	    DocFlowsKeyWord keyword = new DocFlowsKeyWord();
	    String name=request.getParameter("name");
	    if(name != null && !"".equals(name))
        {
            name = name.trim();
            keyword.setTitle((new StringBuilder("%")).append(name).append("%").toString());
        }
	    String startDate = request.getParameter("createTimeF");
	    String endDate = request.getParameter("createTimeL");
	    if (startDate != null && !"".equals(startDate))
	    {
	    	keyword.setStartDate(startDate);
	    	keyword.setEndDate(endDate);
	    }
	    Authorization authorization = (Authorization)request.getSession().getAttribute("authorization");
	    UserPage userPage = (UserPage)request.getSession().getAttribute("userPage");
	    keyword.setUserid(authorization.getLeaderid());
	    keyword.setPowergroup(powergroup);
	    
	    keyword.setPageInfo(userPage.getFileNumber(), currentPage);
	    List list  = null;
	    if (powergroup == 7)
	    {
	    	 list = serivce.getFlowFinishList(keyword);
	 	     count = serivce.getFlowFinishListCount(keyword);
	    }
	    else if (powergroup == 10)
	    {
	    	 if (!authorization.getPowers().contains("6;"))
	    	 {
	 	    	request.setAttribute("oper", "nopower");
		    	return mapping.findForward("tip");
	    	 }
	    	 list = serivce.getFlowFinishAllList(keyword);
	 	     count = serivce.getFlowAllListCount(keyword);
	    }
	    else
	    {
	      list = serivce.getFlowList(keyword);
	      count = serivce.getFlowListCount(keyword);
	    }
	    if (list == null || count == null)
	    {
	    	request.setAttribute("oper", "listerror");
	    	return mapping.findForward("tip");
	    }
	    keyword.setTitle(name);
	    request.getSession().setAttribute("keyword", keyword);
	    request.getSession().setAttribute("pg", request.getParameter("pg"));
	    request.getSession().setAttribute("count", Integer.valueOf(count));
        request.getSession().setAttribute("currentPage", Integer.valueOf(currentPage));
        request.getSession().setAttribute("pageCount", Integer.valueOf(Global.computePageCount(count,userPage.getFileNumber())));
		request.getSession().setAttribute("list", list);
		if (request.getParameter("currentPage") != null)
			return mapping.findForward("list");
		else
		   return mapping.findForward(request.getParameter("pg"));
	}
}