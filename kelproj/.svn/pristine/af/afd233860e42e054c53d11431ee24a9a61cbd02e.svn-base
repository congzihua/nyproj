/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.founder.enp.action;

import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.founder.enp.entity.LogEntity;
import com.founder.enp.entity.UserKeyWord;
import com.founder.enp.service.UserService;
import com.founder.enp.util.Global;

/** 
 * MyEclipse Struts
 * Creation date: 08-10-2009
 * 
 * XDoclet definition:
 * @struts.action
 */
public class WatchesAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String oper = request.getParameter("oper");
		UserService service = new UserService();
		if (oper.equals("list"))
		{
			int currentPage = Integer.parseInt(request.getParameter("currentPage") == null?"1":request.getParameter("currentPage"));
		    String keyword = request.getParameter("name");
		    int count = 0;
		    UserKeyWord keyWord = new UserKeyWord();
		    if(keyword != null && !"".equals(keyword))
	        {
	            keyword = keyword.trim();
	            keyWord.setUserName((new StringBuilder("%")).append(keyword).append("%").toString());
	        }
			count = service.getUserMonitorCount(keyWord);
			keyWord.setPageInfo(20, currentPage);
			List list = service.getUserMonitorList(keyWord);
			if (list == null || count == -1)
			{
				request.setAttribute("oper", "listerror");
				return mapping.findForward("info");
			}

            request.setAttribute("userName", keyword);
            request.setAttribute("count", Integer.valueOf(count));
            request.setAttribute("currentPage", Integer.valueOf(currentPage));
            request.setAttribute("pageCount", Integer.valueOf(Global.computePageCount(count)));
			
			
			request.setAttribute("list", list);
			return mapping.findForward("list");
		}
		if (oper.equals("logout"))
		{
			LogEntity logEntity = new LogEntity();
			logEntity.setActiontype("用户监控");
			String ids = request.getParameter("ids");
			String info="";
			if (service.logout(ids))
			{
				info="logoutsuccess";
				logEntity.setAction("取消上网成功");
			}
			else
			{
				info="logouterror";
				logEntity.setAction("取消上网失败");
			}
			
			com.founder.enp.service.LogService.recordLog(logEntity, request);
			response.setHeader("Cache-Control", "no-store");
			response.setHeader("Pragma", "no-cache");
			response.setDateHeader("Expires", 0L);
			PrintWriter out = null;
			try {
				out = response.getWriter();
			} catch (Exception exception) {
			}
			out.print(info);
			out.close();
		}
		if (oper.equals("cleardoctypeid"))
		{
			service.updateDocNumUnLock(request);
		}
		return null;
	}
}